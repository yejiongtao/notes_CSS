1.元素选择器（又叫类型选择器）    h1{}
    可以为XML文档中的元素设置样式（XML中的元素是用户自定义的）
    
    选择器分组
        h1,p,b{color:blue;}
    通配符
        *{color:black;}所有元素

2.类选择器
    .class1{}
    *.class1{}两个效果一样

    多类选择器
        .important.urgent{}（同时属于这两个类的才行）
        <p class="important urgent">顺序没关系</p>

3.ID选择器
    #intro{}
    *#intro{}两个效果一样
    ID在整个html文档中只会被匹配一次，而且ID不能是多个由空格隔开
    注意：ID与class都是区分大小写的。

4.属性选择器
    选择具有某个属性的元素
        *[title]{}
        a[href]{}
        a[title][href]{}同时具有多个属性
        在XML中很好用，因为XML主张要针对元素和属性的用途指定元素名和属性名

    选择具体的属性值
        a[href="http://www.google.com"]{}
        注意：属性值必须完全匹配，例如：<p class="important warning">
            则要p[class="important warning"]{}才能匹配。

    根据部分属性值选择
        包含某个词：p[title~="important"]{}
        包含子串：p[title*="port"]{}
        开头：p[title^="imp"]{}
        结尾：p[title$="tant"]{}

    特定属性选择器
        *[lang|="en"]{}匹配en或以en-开头的（很神奇，真的只能是en-开头，多用于匹配语言属性lang）

5.后代选择器（又称包含选择器）
    h1 em{}
    注意：两个元素之间的层次间隔可以是无限的。即h1以下的所有em都会被设置，不管隔多远

6.子选择器（child selector）
    只设置他直接包含的子元素，隔代就不行了
    h1>em{}

7.相邻兄弟选择器（adjacent sibling selector）
    h1+p{} 选择紧接在 h1 元素后出现的段落，which h1 和 p 元素拥有共同的父元素
    li+li{} 注意这个语句只选择除了第一个之外的那些li

8.CSS伪类（pseudo-classes）：用于向某些选择器添加特殊的效果。
    锚伪类：a:link{} a:visited{} a:hover{} a:active{}
        a.class1 :visited{}

    :first-child伪类
        p:first-child{} 意思并不是指p的第一个子元素！而是作为第一个子元素的所有p元素
        （必须声明 <!DOCTYPE>，这样 :first-child 才能在 IE 中生效。）
        p>i:first-child{} 意思是所有 <p> 元素中的第一个 <i> 元素
    
    :lang伪类
        使你有能力为不同的语言定义特殊的规则。在下面的例子中，:lang 类为属性值为 no 的 q 元素定义引号的类型：
            q:lang(no){quotes:"~" "~";}
            <q lang="no">行引用两边的引号会变成~</q>

9.CSS伪元素
    :first-line伪元素：用于向文本的首行设置特殊样式。（只能用于块级元素）
        p:first-line{color:red;}
    
    :first-letter伪元素，用于设置文本的首字母。（只能用于块级元素）
        p.class1 :first-letter{}
        :first-letter和:first-line伪元素可以同时存在，顺序没关系
    
    :before伪元素：在元素的内容前面插入新内容。
        在h1元素前面插入一张图片：
            h1:before
            {
            content:url(logo.gif);
            }
    :after伪元素：在元素的内容后面插入新内容